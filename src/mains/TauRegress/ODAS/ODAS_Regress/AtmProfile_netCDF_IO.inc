!
! Auto-generated by gen_nc.rb, $Revision: 32340 $
!
  
  
  ! Function to define the dimensions in a group.

  FUNCTION DefineDimensions( &
    AtmProfile       , &
    GroupId          , &
    n_Levels_DimId   , &
    n_Layers_DimId   , &
    n_Absorbers_DimId, &
    PL_Strlen_DimId  ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(AtmProfile_type), INTENT(IN)  :: AtmProfile       
    INTEGER              , INTENT(IN)  :: GroupId          
    INTEGER              , INTENT(OUT) :: n_Levels_DimId   
    INTEGER              , INTENT(OUT) :: n_Layers_DimId   
    INTEGER              , INTENT(OUT) :: n_Absorbers_DimId
    INTEGER              , INTENT(OUT) :: PL_Strlen_DimId  
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'AtmProfile_netCDF_IO::DefineDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER :: nf90_stat

    ! Setup
    err_stat = SUCCESS

    ! Define the dimensions  
    ! ...Number of atmospheric levels
    nf90_stat = NF90_DEF_DIM( groupid,LEVEL_DIMNAME,AtmProfile%n_Layers+1,n_Levels_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LEVEL_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of atmospheric layers
    nf90_stat = NF90_DEF_DIM( groupid,LAYER_DIMNAME,AtmProfile%n_Layers,n_Layers_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LAYER_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of gaseous absorbers
    nf90_stat = NF90_DEF_DIM( groupid,ABSORBER_DIMNAME,AtmProfile%n_Absorbers,n_Absorbers_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ABSORBER_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Profile description string length
    nf90_stat = NF90_DEF_DIM( groupid,DESCRIPTION_DIMNAME,LEN(AtmProfile%Description),PL_Strlen_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//DESCRIPTION_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineDimensions  
  
  ! Function to get the dimensions in a group.

  FUNCTION ReadDimensions( &
    GroupId    , &
    n_Levels   , &
    n_Layers   , &
    n_Absorbers, &
    PL_Strlen  ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER, INTENT(IN)  :: GroupId    
    INTEGER, INTENT(OUT) :: n_Levels   
    INTEGER, INTENT(OUT) :: n_Layers   
    INTEGER, INTENT(OUT) :: n_Absorbers
    INTEGER, INTENT(OUT) :: PL_Strlen  
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'ACCoeff_netCDF_IO::ReadDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER :: nf90_stat
    INTEGER :: dimid

    ! Setup
    err_stat = SUCCESS

    ! Get the group dimensions
    ! ...n_Levels dimension
    nf90_stat = NF90_INQ_DIMID( groupid,LEVEL_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//LEVEL_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=n_Levels )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//LEVEL_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Layers dimension
    nf90_stat = NF90_INQ_DIMID( groupid,LAYER_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//LAYER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=n_Layers )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//LAYER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Absorbers dimension
    nf90_stat = NF90_INQ_DIMID( groupid,ABSORBER_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//ABSORBER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=n_Absorbers )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//ABSORBER_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...PL_Strlen dimension
    nf90_stat = NF90_INQ_DIMID( groupid,DESCRIPTION_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//DESCRIPTION_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=PL_Strlen )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//DESCRIPTION_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION ReadDimensions  
  
  ! Function to define the variables in a group.

  FUNCTION DefineVariables( &
    GroupId          , &
    n_Levels_DimId   , &
    n_Layers_DimId   , &
    n_Absorbers_DimId, &
    PL_Strlen_DimId  ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER, INTENT(IN) :: GroupId          
    INTEGER, INTENT(IN) :: n_Levels_DimId   
    INTEGER, INTENT(IN) :: n_Layers_DimId   
    INTEGER, INTENT(IN) :: n_Absorbers_DimId
    INTEGER, INTENT(IN) :: PL_Strlen_DimId  
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'AtmProfile_netCDF_IO::DefineVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER :: nf90_stat
    INTEGER :: varid
    INTEGER :: put_stat(4)

    ! Setup
    err_stat = SUCCESS

    ! Define the variables
    ! ...Profile variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      PROFILE_VARNAME, &
      PROFILE_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//PROFILE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,PROFILE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,PROFILE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,PROFILE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,PROFILE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//PROFILE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Description variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      DESCRIPTION_VARNAME, &
      DESCRIPTION_TYPE, &
      dimids=(/pl_strlen_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//DESCRIPTION_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,DESCRIPTION_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,DESCRIPTION_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,DESCRIPTION_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,DESCRIPTION_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//DESCRIPTION_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Climatology_Model variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      CLIMATOLOGY_MODEL_VARNAME, &
      CLIMATOLOGY_MODEL_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//CLIMATOLOGY_MODEL_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,CLIMATOLOGY_MODEL_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,CLIMATOLOGY_MODEL_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,CLIMATOLOGY_MODEL_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,CLIMATOLOGY_MODEL_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//CLIMATOLOGY_MODEL_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Year variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      YEAR_VARNAME, &
      YEAR_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//YEAR_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,YEAR_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,YEAR_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,YEAR_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,YEAR_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//YEAR_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Month variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      MONTH_VARNAME, &
      MONTH_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//MONTH_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,MONTH_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,MONTH_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,MONTH_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,MONTH_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MONTH_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Day variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      DAY_VARNAME, &
      DAY_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//DAY_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,DAY_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,DAY_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,DAY_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,DAY_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//DAY_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Hour variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      HOUR_VARNAME, &
      HOUR_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//HOUR_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,HOUR_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,HOUR_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,HOUR_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,HOUR_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//HOUR_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Latitude variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LATITUDE_VARNAME, &
      LATITUDE_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LATITUDE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LATITUDE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LATITUDE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LATITUDE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LATITUDE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LATITUDE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Longitude variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LONGITUDE_VARNAME, &
      LONGITUDE_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LONGITUDE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LONGITUDE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LONGITUDE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LONGITUDE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LONGITUDE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LONGITUDE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Surface_Altitude variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      SURFACE_ALTITUDE_VARNAME, &
      SURFACE_ALTITUDE_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SURFACE_ALTITUDE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,SURFACE_ALTITUDE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,SURFACE_ALTITUDE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,SURFACE_ALTITUDE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,SURFACE_ALTITUDE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SURFACE_ALTITUDE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Id variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ABSORBER_ID_VARNAME, &
      ABSORBER_ID_TYPE, &
      dimids=(/n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ABSORBER_ID_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ABSORBER_ID_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ABSORBER_ID_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ABSORBER_ID_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ABSORBER_ID_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ABSORBER_ID_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Units_Id variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ABSORBER_UNITS_ID_VARNAME, &
      ABSORBER_UNITS_ID_TYPE, &
      dimids=(/n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ABSORBER_UNITS_ID_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ABSORBER_UNITS_ID_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ABSORBER_UNITS_ID_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ABSORBER_UNITS_ID_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ABSORBER_UNITS_ID_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ABSORBER_UNITS_ID_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Pressure variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LEVEL_PRESSURE_VARNAME, &
      LEVEL_PRESSURE_TYPE, &
      dimids=(/n_levels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LEVEL_PRESSURE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LEVEL_PRESSURE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LEVEL_PRESSURE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LEVEL_PRESSURE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LEVEL_PRESSURE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_PRESSURE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Temperature variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LEVEL_TEMPERATURE_VARNAME, &
      LEVEL_TEMPERATURE_TYPE, &
      dimids=(/n_levels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LEVEL_TEMPERATURE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LEVEL_TEMPERATURE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LEVEL_TEMPERATURE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LEVEL_TEMPERATURE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LEVEL_TEMPERATURE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_TEMPERATURE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Absorber variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LEVEL_ABSORBER_VARNAME, &
      LEVEL_ABSORBER_TYPE, &
      dimids=(/n_levels_dimid, n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LEVEL_ABSORBER_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LEVEL_ABSORBER_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LEVEL_ABSORBER_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LEVEL_ABSORBER_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LEVEL_ABSORBER_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_ABSORBER_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Altitude variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LEVEL_ALTITUDE_VARNAME, &
      LEVEL_ALTITUDE_TYPE, &
      dimids=(/n_levels_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LEVEL_ALTITUDE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LEVEL_ALTITUDE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LEVEL_ALTITUDE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LEVEL_ALTITUDE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LEVEL_ALTITUDE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_ALTITUDE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Pressure variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LAYER_PRESSURE_VARNAME, &
      LAYER_PRESSURE_TYPE, &
      dimids=(/n_layers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LAYER_PRESSURE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LAYER_PRESSURE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LAYER_PRESSURE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LAYER_PRESSURE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LAYER_PRESSURE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_PRESSURE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Temperature variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LAYER_TEMPERATURE_VARNAME, &
      LAYER_TEMPERATURE_TYPE, &
      dimids=(/n_layers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LAYER_TEMPERATURE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LAYER_TEMPERATURE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LAYER_TEMPERATURE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LAYER_TEMPERATURE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LAYER_TEMPERATURE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_TEMPERATURE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Absorber variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LAYER_ABSORBER_VARNAME, &
      LAYER_ABSORBER_TYPE, &
      dimids=(/n_layers_dimid, n_absorbers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LAYER_ABSORBER_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LAYER_ABSORBER_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LAYER_ABSORBER_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LAYER_ABSORBER_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LAYER_ABSORBER_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_ABSORBER_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Delta_Z variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LAYER_DELTA_Z_VARNAME, &
      LAYER_DELTA_Z_TYPE, &
      dimids=(/n_layers_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LAYER_DELTA_Z_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LAYER_DELTA_Z_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LAYER_DELTA_Z_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LAYER_DELTA_Z_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LAYER_DELTA_Z_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_DELTA_Z_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineVariables  
  
  ! Function to read the variables from a group.

  FUNCTION ReadVariables( &
    AtmProfile, &
    GroupId   ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(AtmProfile_type), INTENT(IN OUT) :: AtmProfile
    INTEGER              , INTENT(IN)     :: GroupId   
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'AtmProfile_netCDF_IO::ReadVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER :: nf90_stat
    INTEGER :: varid

    ! Setup
    err_stat = SUCCESS

    ! Read the AtmProfile data
    ! ...Profile variable
    nf90_stat = NF90_INQ_VARID( groupid,PROFILE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//PROFILE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Profile )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//PROFILE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Description variable
    nf90_stat = NF90_INQ_VARID( groupid,DESCRIPTION_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//DESCRIPTION_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Description )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//DESCRIPTION_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Climatology_Model variable
    nf90_stat = NF90_INQ_VARID( groupid,CLIMATOLOGY_MODEL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//CLIMATOLOGY_MODEL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Climatology_Model )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//CLIMATOLOGY_MODEL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Year variable
    nf90_stat = NF90_INQ_VARID( groupid,YEAR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//YEAR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Year )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//YEAR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Month variable
    nf90_stat = NF90_INQ_VARID( groupid,MONTH_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MONTH_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Month )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//MONTH_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Day variable
    nf90_stat = NF90_INQ_VARID( groupid,DAY_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//DAY_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Day )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//DAY_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Hour variable
    nf90_stat = NF90_INQ_VARID( groupid,HOUR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//HOUR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Hour )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//HOUR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Latitude variable
    nf90_stat = NF90_INQ_VARID( groupid,LATITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LATITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Latitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LATITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Longitude variable
    nf90_stat = NF90_INQ_VARID( groupid,LONGITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LONGITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Longitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LONGITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Surface_Altitude variable
    nf90_stat = NF90_INQ_VARID( groupid,SURFACE_ALTITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SURFACE_ALTITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Surface_Altitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//SURFACE_ALTITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,ABSORBER_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ABSORBER_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Absorber_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ABSORBER_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Units_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,ABSORBER_UNITS_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ABSORBER_UNITS_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Absorber_Units_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ABSORBER_UNITS_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Level_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LEVEL_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_TEMPERATURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_TEMPERATURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Level_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LEVEL_TEMPERATURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Level_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LEVEL_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Altitude variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_ALTITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_ALTITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Level_Altitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LEVEL_ALTITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Layer_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LAYER_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_TEMPERATURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_TEMPERATURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Layer_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LAYER_TEMPERATURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Layer_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LAYER_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Delta_Z variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_DELTA_Z_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_DELTA_Z_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,AtmProfile%Layer_Delta_Z )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LAYER_DELTA_Z_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION ReadVariables  
  
  ! Function to write the variables in a group.

  FUNCTION WriteVariables( &
    AtmProfile, &
    GroupId   ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(AtmProfile_type), INTENT(IN) :: AtmProfile
    INTEGER              , INTENT(IN) :: GroupId   
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'AtmProfile_netCDF_IO::WriteVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER :: nf90_stat
    INTEGER :: varid

    ! Setup
    err_stat = SUCCESS

    ! Write the variables
    ! ...Profile variable
    nf90_stat = NF90_INQ_VARID( groupid,PROFILE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//PROFILE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Profile )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//PROFILE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Description variable
    nf90_stat = NF90_INQ_VARID( groupid,DESCRIPTION_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//DESCRIPTION_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Description )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//DESCRIPTION_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Climatology_Model variable
    nf90_stat = NF90_INQ_VARID( groupid,CLIMATOLOGY_MODEL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//CLIMATOLOGY_MODEL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Climatology_Model )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//CLIMATOLOGY_MODEL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Year variable
    nf90_stat = NF90_INQ_VARID( groupid,YEAR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//YEAR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Year )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//YEAR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Month variable
    nf90_stat = NF90_INQ_VARID( groupid,MONTH_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MONTH_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Month )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MONTH_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Day variable
    nf90_stat = NF90_INQ_VARID( groupid,DAY_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//DAY_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Day )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//DAY_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Hour variable
    nf90_stat = NF90_INQ_VARID( groupid,HOUR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//HOUR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Hour )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//HOUR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Latitude variable
    nf90_stat = NF90_INQ_VARID( groupid,LATITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LATITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Latitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LATITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Longitude variable
    nf90_stat = NF90_INQ_VARID( groupid,LONGITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LONGITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Longitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LONGITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Surface_Altitude variable
    nf90_stat = NF90_INQ_VARID( groupid,SURFACE_ALTITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SURFACE_ALTITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Surface_Altitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SURFACE_ALTITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,ABSORBER_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ABSORBER_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Absorber_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ABSORBER_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Absorber_Units_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,ABSORBER_UNITS_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ABSORBER_UNITS_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Absorber_Units_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ABSORBER_UNITS_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Level_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_TEMPERATURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_TEMPERATURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Level_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_TEMPERATURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Level_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Level_Altitude variable
    nf90_stat = NF90_INQ_VARID( groupid,LEVEL_ALTITUDE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LEVEL_ALTITUDE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Level_Altitude )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LEVEL_ALTITUDE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_PRESSURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_PRESSURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Layer_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_PRESSURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_TEMPERATURE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_TEMPERATURE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Layer_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_TEMPERATURE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Absorber variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_ABSORBER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_ABSORBER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Layer_Absorber )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_ABSORBER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Layer_Delta_Z variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYER_DELTA_Z_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYER_DELTA_Z_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,AtmProfile%Layer_Delta_Z )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYER_DELTA_Z_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION WriteVariables  
  
  ! Function to read the global/group attributes.

  FUNCTION ReadGAtts( &
    ncid       , &
    Release    , &
    Version    , &
    Title      , &
    History    , &
    Comment    , &
    Profile_Set) &
  RESULT( err_stat )
    ! Arguments
    INTEGER     ,           INTENT(IN)  :: ncid       
    INTEGER     , OPTIONAL, INTENT(OUT) :: Release    
    INTEGER     , OPTIONAL, INTENT(OUT) :: Version    
    CHARACTER(*), OPTIONAL, INTENT(OUT) :: Title      
    CHARACTER(*), OPTIONAL, INTENT(OUT) :: History    
    CHARACTER(*), OPTIONAL, INTENT(OUT) :: Comment    
    CHARACTER(*), OPTIONAL, INTENT(OUT) :: Profile_Set
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'AtmProfile_netCDF_IO::ReadGAtts'
    ! Local variables
    CHARACTER(ML)   :: msg
    CHARACTER(256)  :: gattname
    CHARACTER(5000) :: gattstring
    INTEGER :: nf90_stat

    ! Set up
    err_stat = SUCCESS

    ! The global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Title = gattstring(1:MIN(LEN(Title), LEN_TRIM(gattstring)))
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      History = gattstring(1:MIN(LEN(History), LEN_TRIM(gattstring)))
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Comment = gattstring(1:MIN(LEN(Comment), LEN_TRIM(gattstring)))
    END IF
    ! ...The Profile_Set
    IF ( PRESENT(Profile_Set) ) THEN
      gattname = PROFILE_SET_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Profile_Set = gattstring(1:MIN(LEN(Profile_Set), LEN_TRIM(gattstring)))
    END IF

  END FUNCTION ReadGAtts  
  
  ! Function to write the global/group attributes.

  FUNCTION WriteGAtts( &
    ncid       , &
    Release    , &
    Version    , &
    Title      , &
    History    , &
    Comment    , &
    Profile_Set) &
  RESULT( err_stat )
    ! Arguments
    INTEGER     ,           INTENT(IN) :: ncid       
    INTEGER     , OPTIONAL, INTENT(IN) :: Release    
    INTEGER     , OPTIONAL, INTENT(IN) :: Version    
    CHARACTER(*), OPTIONAL, INTENT(IN) :: Title      
    CHARACTER(*), OPTIONAL, INTENT(IN) :: History    
    CHARACTER(*), OPTIONAL, INTENT(IN) :: Comment    
    CHARACTER(*), OPTIONAL, INTENT(IN) :: Profile_Set
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'AtmProfile_netCDF_IO::WriteGAtts'
    CHARACTER(*), PARAMETER :: WRITE_MODULE_HISTORY_GATTNAME   = 'write_module_history'
    CHARACTER(*), PARAMETER :: CREATION_DATE_AND_TIME_GATTNAME = 'creation_date_and_time'
    ! Local variables
    CHARACTER(ML) :: msg
    CHARACTER(ML) :: gattname
    CHARACTER(8)  :: cdate
    CHARACTER(10) :: ctime
    CHARACTER(5)  :: czone
    INTEGER :: nf90_stat

    ! Set up
    err_stat = SUCCESS
    msg = ''

    ! Mandatory global attributes
    ! ...Software ID
    gattname = WRITE_MODULE_HISTORY_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),MODULE_VERSION_ID )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Creation date
    CALL DATE_AND_TIME( cdate, ctime, czone )
    gattname = CREATION_DATE_AND_TIME_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname), &
                              cdate(1:4)//'/'//cdate(5:6)//'/'//cdate(7:8)//', '// &
                              ctime(1:2)//':'//ctime(3:4)//':'//ctime(5:6)//' '// &
                              czone//'UTC' )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF


    ! Optional global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Title )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),History )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Comment )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Profile_Set
    IF ( PRESENT(Profile_Set) ) THEN
      gattname = PROFILE_SET_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Profile_Set )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF

  END FUNCTION WriteGAtts