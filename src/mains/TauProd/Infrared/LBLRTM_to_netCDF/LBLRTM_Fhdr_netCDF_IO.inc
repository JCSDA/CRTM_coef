!
! Auto-generated by gen_nc.rb, $Revision: 35240 $
!


  ! Function to define the dimensions in a group.

  FUNCTION DefineDimensions( &
    LBLRTM_Fhdr      , &
    GroupId          , &
    n_Molecules_DimId, &
    n_Ancillary_DimId, &
    UID_Strlen_DimId , &
    SL_Strlen_DimId  ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(LBLRTM_Fhdr_type), INTENT(IN)  :: LBLRTM_Fhdr      
    INTEGER(Long)         , INTENT(IN)  :: GroupId          
    INTEGER(Long)         , INTENT(OUT) :: n_Molecules_DimId
    INTEGER(Long)         , INTENT(OUT) :: n_Ancillary_DimId
    INTEGER(Long)         , INTENT(OUT) :: UID_Strlen_DimId 
    INTEGER(Long)         , INTENT(OUT) :: SL_Strlen_DimId  
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Fhdr_netCDF_IO::DefineDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: dimvalue

    ! Setup
    err_stat = SUCCESS

    ! Define the dimensions
    ! ...Max. number of LBLRTM molecular species
    dimvalue = INT(N_MOL,Long)
    nf90_stat = NF90_DEF_DIM( groupid,MOLECULE_DIMNAME,dimvalue,n_Molecules_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//MOLECULE_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of ancillary elements
    dimvalue = INT(8,Long)
    nf90_stat = NF90_DEF_DIM( groupid,ANCILLARY_DIMNAME,dimvalue,n_Ancillary_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ANCILLARY_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...User Id string length
    dimvalue = INT(LEN(LBLRTM_Fhdr%User_Id),Long)
    nf90_stat = NF90_DEF_DIM( groupid,UID_STRLEN_DIMNAME,dimvalue,UID_Strlen_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//UID_STRLEN_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Fhdr component string length
    dimvalue = INT(8,Long)
    nf90_stat = NF90_DEF_DIM( groupid,SL_STRLEN_DIMNAME,dimvalue,SL_Strlen_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SL_STRLEN_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineDimensions

  ! Function to get the dimensions in a group.

  FUNCTION ReadDimensions( &
    GroupId    , &
    n_Molecules, &
    n_Ancillary, &
    UID_Strlen , &
    SL_Strlen  ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long), INTENT(IN)  :: GroupId    
    INTEGER      , INTENT(OUT) :: n_Molecules
    INTEGER      , INTENT(OUT) :: n_Ancillary
    INTEGER      , INTENT(OUT) :: UID_Strlen 
    INTEGER      , INTENT(OUT) :: SL_Strlen  
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Fhdr_netCDF_IO::ReadDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: dimid
    INTEGER(Long) :: dimvalue

    ! Setup
    err_stat = SUCCESS

    ! Get the group dimensions
    ! ...n_Molecules dimension
    nf90_stat = NF90_INQ_DIMID( groupid,MOLECULE_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//MOLECULE_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//MOLECULE_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Molecules = dimvalue
    ! ...n_Ancillary dimension
    nf90_stat = NF90_INQ_DIMID( groupid,ANCILLARY_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//ANCILLARY_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//ANCILLARY_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Ancillary = dimvalue
    ! ...UID_Strlen dimension
    nf90_stat = NF90_INQ_DIMID( groupid,UID_STRLEN_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//UID_STRLEN_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//UID_STRLEN_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    UID_Strlen = dimvalue
    ! ...SL_Strlen dimension
    nf90_stat = NF90_INQ_DIMID( groupid,SL_STRLEN_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//SL_STRLEN_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//SL_STRLEN_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    SL_Strlen = dimvalue

  END FUNCTION ReadDimensions

  ! Function to define the variables in a group.

  FUNCTION DefineVariables( &
    GroupId          , &
    n_Molecules_DimId, &
    n_Ancillary_DimId, &
    UID_Strlen_DimId , &
    SL_Strlen_DimId  ) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long), INTENT(IN) :: GroupId          
    INTEGER(Long), INTENT(IN) :: n_Molecules_DimId
    INTEGER(Long), INTENT(IN) :: n_Ancillary_DimId
    INTEGER(Long), INTENT(IN) :: UID_Strlen_DimId 
    INTEGER(Long), INTENT(IN) :: SL_Strlen_DimId  
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Fhdr_netCDF_IO::DefineVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid
    INTEGER(Long) :: put_stat(4)

    ! Setup
    err_stat = SUCCESS

    ! Define the variables
    ! ...User_Id variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      USER_ID_VARNAME, &
      USER_ID_TYPE, &
      dimids=(/uid_strlen_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//USER_ID_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,USER_ID_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,USER_ID_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,USER_ID_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,USER_ID_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//USER_ID_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Column_Scale_Factor variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      COL_SCALE_FACTOR_VARNAME, &
      COL_SCALE_FACTOR_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//COL_SCALE_FACTOR_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,COL_SCALE_FACTOR_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,COL_SCALE_FACTOR_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,COL_SCALE_FACTOR_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,COL_SCALE_FACTOR_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//COL_SCALE_FACTOR_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Average_Layer_Pressure variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      AVG_LAYER_PRES_VARNAME, &
      AVG_LAYER_PRES_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//AVG_LAYER_PRES_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,AVG_LAYER_PRES_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,AVG_LAYER_PRES_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,AVG_LAYER_PRES_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,AVG_LAYER_PRES_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//AVG_LAYER_PRES_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Average_Layer_Temperature variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      AVG_LAYER_TEMP_VARNAME, &
      AVG_LAYER_TEMP_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//AVG_LAYER_TEMP_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,AVG_LAYER_TEMP_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,AVG_LAYER_TEMP_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,AVG_LAYER_TEMP_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,AVG_LAYER_TEMP_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//AVG_LAYER_TEMP_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Molecule_Id variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      MOL_ID_VARNAME, &
      MOL_ID_TYPE, &
      dimids=(/sl_strlen_dimid, n_molecules_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//MOL_ID_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,MOL_ID_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,MOL_ID_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,MOL_ID_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,MOL_ID_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MOL_ID_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Molecule_Column_Density variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      MOL_COL_DENS_VARNAME, &
      MOL_COL_DENS_TYPE, &
      dimids=(/n_molecules_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//MOL_COL_DENS_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,MOL_COL_DENS_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,MOL_COL_DENS_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,MOL_COL_DENS_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,MOL_COL_DENS_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MOL_COL_DENS_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Broadening_Gas_Column_Density variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      BROAD_COL_DENS_VARNAME, &
      BROAD_COL_DENS_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//BROAD_COL_DENS_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,BROAD_COL_DENS_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,BROAD_COL_DENS_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,BROAD_COL_DENS_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,BROAD_COL_DENS_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BROAD_COL_DENS_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Frequency_Interval variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      FREQ_INTERVAL_VARNAME, &
      FREQ_INTERVAL_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//FREQ_INTERVAL_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,FREQ_INTERVAL_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,FREQ_INTERVAL_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,FREQ_INTERVAL_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,FREQ_INTERVAL_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//FREQ_INTERVAL_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Begin_Frequency variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      BEGIN_FREQ_VARNAME, &
      BEGIN_FREQ_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//BEGIN_FREQ_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,BEGIN_FREQ_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,BEGIN_FREQ_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,BEGIN_FREQ_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,BEGIN_FREQ_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BEGIN_FREQ_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...End_Frequency variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      END_FREQ_VARNAME, &
      END_FREQ_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//END_FREQ_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,END_FREQ_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,END_FREQ_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,END_FREQ_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,END_FREQ_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//END_FREQ_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Boundary_Temperature variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      BDRY_TEMP_VARNAME, &
      BDRY_TEMP_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//BDRY_TEMP_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,BDRY_TEMP_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,BDRY_TEMP_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,BDRY_TEMP_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,BDRY_TEMP_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BDRY_TEMP_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Boundary_Emissivity variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      BDRY_EMIS_VARNAME, &
      BDRY_EMIS_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//BDRY_EMIS_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,BDRY_EMIS_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,BDRY_EMIS_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,BDRY_EMIS_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,BDRY_EMIS_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BDRY_EMIS_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Molecules variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      N_MOLECULES_VARNAME, &
      N_MOLECULES_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//N_MOLECULES_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,N_MOLECULES_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,N_MOLECULES_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,N_MOLECULES_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,N_MOLECULES_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//N_MOLECULES_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Layer variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      N_LAYER_VARNAME, &
      N_LAYER_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//N_LAYER_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,N_LAYER_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,N_LAYER_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,N_LAYER_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,N_LAYER_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//N_LAYER_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OD_Layering_Control_Flag variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      OD_LAYER_FLAG_VARNAME, &
      OD_LAYER_FLAG_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//OD_LAYER_FLAG_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,OD_LAYER_FLAG_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,OD_LAYER_FLAG_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,OD_LAYER_FLAG_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,OD_LAYER_FLAG_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OD_LAYER_FLAG_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Calculation_Date variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      CALC_DATE_VARNAME, &
      CALC_DATE_TYPE, &
      dimids=(/sl_strlen_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//CALC_DATE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,CALC_DATE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,CALC_DATE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,CALC_DATE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,CALC_DATE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//CALC_DATE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Calculation_Time variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      CALC_TIME_VARNAME, &
      CALC_TIME_TYPE, &
      dimids=(/sl_strlen_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//CALC_TIME_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,CALC_TIME_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,CALC_TIME_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,CALC_TIME_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,CALC_TIME_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//CALC_TIME_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...ancillary variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ANCILLARY_VARNAME, &
      ANCILLARY_TYPE, &
      dimids=(/sl_strlen_dimid, n_ancillary_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ANCILLARY_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ANCILLARY_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ANCILLARY_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ANCILLARY_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ANCILLARY_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ANCILLARY_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...hirac variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      HIRAC_VARNAME, &
      HIRAC_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//HIRAC_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,HIRAC_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,HIRAC_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,HIRAC_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,HIRAC_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//HIRAC_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...lblf4 variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LBLF4_VARNAME, &
      LBLF4_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LBLF4_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LBLF4_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LBLF4_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LBLF4_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LBLF4_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LBLF4_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...xscnt variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      XSCNT_VARNAME, &
      XSCNT_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//XSCNT_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,XSCNT_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,XSCNT_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,XSCNT_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,XSCNT_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//XSCNT_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...aersl variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      AERSL_VARNAME, &
      AERSL_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//AERSL_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,AERSL_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,AERSL_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,AERSL_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,AERSL_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//AERSL_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...emit variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      EMIT_VARNAME, &
      EMIT_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//EMIT_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,EMIT_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,EMIT_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,EMIT_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,EMIT_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//EMIT_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...scan variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      SCAN_VARNAME, &
      SCAN_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SCAN_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,SCAN_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,SCAN_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,SCAN_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,SCAN_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SCAN_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...plot variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      PLOT_VARNAME, &
      PLOT_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//PLOT_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,PLOT_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,PLOT_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,PLOT_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,PLOT_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//PLOT_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...path variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      PATH_VARNAME, &
      PATH_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//PATH_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,PATH_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,PATH_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,PATH_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,PATH_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//PATH_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...jrad variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      JRAD_VARNAME, &
      JRAD_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//JRAD_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,JRAD_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,JRAD_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,JRAD_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,JRAD_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//JRAD_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...test variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      TEST_VARNAME, &
      TEST_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//TEST_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,TEST_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,TEST_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,TEST_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,TEST_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TEST_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...merge variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      MERGE_VARNAME, &
      MERGE_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//MERGE_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,MERGE_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,MERGE_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,MERGE_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,MERGE_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MERGE_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...scnid variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      SCNID_VARNAME, &
      SCNID_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SCNID_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,SCNID_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,SCNID_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,SCNID_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,SCNID_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SCNID_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...hwhm variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      HWHM_VARNAME, &
      HWHM_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//HWHM_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,HWHM_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,HWHM_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,HWHM_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,HWHM_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//HWHM_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...idabs variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      IDABS_VARNAME, &
      IDABS_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//IDABS_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,IDABS_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,IDABS_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,IDABS_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,IDABS_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//IDABS_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...atm variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      ATM_VARNAME, &
      ATM_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//ATM_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,ATM_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,ATM_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,ATM_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,ATM_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ATM_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...layr1 variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      LAYR1_VARNAME, &
      LAYR1_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//LAYR1_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,LAYR1_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,LAYR1_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,LAYR1_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,LAYR1_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYR1_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...nlayr variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      NLAYR_VARNAME, &
      NLAYR_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//NLAYR_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,NLAYR_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,NLAYR_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,NLAYR_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,NLAYR_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//NLAYR_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineVariables

  ! Function to read the variables from a group.

  FUNCTION ReadVariables( &
    LBLRTM_Fhdr, &
    GroupId    ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(LBLRTM_Fhdr_type), INTENT(IN OUT) :: LBLRTM_Fhdr
    INTEGER(Long)         , INTENT(IN)     :: GroupId    
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Fhdr_netCDF_IO::ReadVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid

    ! Setup
    err_stat = SUCCESS

    ! Read the LBLRTM_Fhdr data
    ! ...User_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,USER_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//USER_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%User_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//USER_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Column_Scale_Factor variable
    nf90_stat = NF90_INQ_VARID( groupid,COL_SCALE_FACTOR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//COL_SCALE_FACTOR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Column_Scale_Factor )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//COL_SCALE_FACTOR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Average_Layer_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,AVG_LAYER_PRES_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//AVG_LAYER_PRES_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Average_Layer_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//AVG_LAYER_PRES_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Average_Layer_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,AVG_LAYER_TEMP_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//AVG_LAYER_TEMP_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Average_Layer_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//AVG_LAYER_TEMP_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Molecule_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,MOL_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MOL_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Molecule_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//MOL_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Molecule_Column_Density variable
    nf90_stat = NF90_INQ_VARID( groupid,MOL_COL_DENS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MOL_COL_DENS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Molecule_Column_Density )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//MOL_COL_DENS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Broadening_Gas_Column_Density variable
    nf90_stat = NF90_INQ_VARID( groupid,BROAD_COL_DENS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BROAD_COL_DENS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Broadening_Gas_Column_Density )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//BROAD_COL_DENS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Frequency_Interval variable
    nf90_stat = NF90_INQ_VARID( groupid,FREQ_INTERVAL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//FREQ_INTERVAL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Frequency_Interval )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//FREQ_INTERVAL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Begin_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,BEGIN_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BEGIN_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Begin_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//BEGIN_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...End_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,END_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//END_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%End_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//END_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Boundary_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,BDRY_TEMP_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BDRY_TEMP_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Boundary_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//BDRY_TEMP_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Boundary_Emissivity variable
    nf90_stat = NF90_INQ_VARID( groupid,BDRY_EMIS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BDRY_EMIS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Boundary_Emissivity )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//BDRY_EMIS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Molecules variable
    nf90_stat = NF90_INQ_VARID( groupid,N_MOLECULES_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//N_MOLECULES_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%n_Molecules )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//N_MOLECULES_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Layer variable
    nf90_stat = NF90_INQ_VARID( groupid,N_LAYER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//N_LAYER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%n_Layer )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//N_LAYER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OD_Layering_Control_Flag variable
    nf90_stat = NF90_INQ_VARID( groupid,OD_LAYER_FLAG_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OD_LAYER_FLAG_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%OD_Layering_Control_Flag )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//OD_LAYER_FLAG_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Calculation_Date variable
    nf90_stat = NF90_INQ_VARID( groupid,CALC_DATE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//CALC_DATE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Calculation_Date )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//CALC_DATE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Calculation_Time variable
    nf90_stat = NF90_INQ_VARID( groupid,CALC_TIME_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//CALC_TIME_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%Calculation_Time )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//CALC_TIME_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...ancillary variable
    nf90_stat = NF90_INQ_VARID( groupid,ANCILLARY_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ANCILLARY_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%ancillary )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ANCILLARY_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...hirac variable
    nf90_stat = NF90_INQ_VARID( groupid,HIRAC_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//HIRAC_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%hirac )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//HIRAC_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...lblf4 variable
    nf90_stat = NF90_INQ_VARID( groupid,LBLF4_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LBLF4_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%lblf4 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LBLF4_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...xscnt variable
    nf90_stat = NF90_INQ_VARID( groupid,XSCNT_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//XSCNT_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%xscnt )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//XSCNT_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...aersl variable
    nf90_stat = NF90_INQ_VARID( groupid,AERSL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//AERSL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%aersl )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//AERSL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...emit variable
    nf90_stat = NF90_INQ_VARID( groupid,EMIT_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//EMIT_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%emit )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//EMIT_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...scan variable
    nf90_stat = NF90_INQ_VARID( groupid,SCAN_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SCAN_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%scan )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//SCAN_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...plot variable
    nf90_stat = NF90_INQ_VARID( groupid,PLOT_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//PLOT_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%plot )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//PLOT_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...path variable
    nf90_stat = NF90_INQ_VARID( groupid,PATH_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//PATH_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%path )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//PATH_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...jrad variable
    nf90_stat = NF90_INQ_VARID( groupid,JRAD_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//JRAD_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%jrad )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//JRAD_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...test variable
    nf90_stat = NF90_INQ_VARID( groupid,TEST_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//TEST_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%test )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//TEST_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...merge variable
    nf90_stat = NF90_INQ_VARID( groupid,MERGE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MERGE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%merge )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//MERGE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...scnid variable
    nf90_stat = NF90_INQ_VARID( groupid,SCNID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SCNID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%scnid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//SCNID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...hwhm variable
    nf90_stat = NF90_INQ_VARID( groupid,HWHM_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//HWHM_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%hwhm )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//HWHM_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...idabs variable
    nf90_stat = NF90_INQ_VARID( groupid,IDABS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//IDABS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%idabs )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//IDABS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...atm variable
    nf90_stat = NF90_INQ_VARID( groupid,ATM_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ATM_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%atm )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//ATM_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...layr1 variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYR1_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYR1_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%layr1 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//LAYR1_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...nlayr variable
    nf90_stat = NF90_INQ_VARID( groupid,NLAYR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//NLAYR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Fhdr%nlayr )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//NLAYR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION ReadVariables

  ! Function to write the variables in a group.

  FUNCTION WriteVariables( &
    LBLRTM_Fhdr, &
    GroupId    ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(LBLRTM_Fhdr_type), INTENT(IN) :: LBLRTM_Fhdr
    INTEGER(Long)         , INTENT(IN) :: GroupId    
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Fhdr_netCDF_IO::WriteVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid

    ! Setup
    err_stat = SUCCESS

    ! Write the variables
    ! ...User_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,USER_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//USER_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%User_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//USER_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Column_Scale_Factor variable
    nf90_stat = NF90_INQ_VARID( groupid,COL_SCALE_FACTOR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//COL_SCALE_FACTOR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Column_Scale_Factor )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//COL_SCALE_FACTOR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Average_Layer_Pressure variable
    nf90_stat = NF90_INQ_VARID( groupid,AVG_LAYER_PRES_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//AVG_LAYER_PRES_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Average_Layer_Pressure )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//AVG_LAYER_PRES_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Average_Layer_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,AVG_LAYER_TEMP_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//AVG_LAYER_TEMP_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Average_Layer_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//AVG_LAYER_TEMP_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Molecule_Id variable
    nf90_stat = NF90_INQ_VARID( groupid,MOL_ID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MOL_ID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Molecule_Id )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MOL_ID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Molecule_Column_Density variable
    nf90_stat = NF90_INQ_VARID( groupid,MOL_COL_DENS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MOL_COL_DENS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Molecule_Column_Density )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MOL_COL_DENS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Broadening_Gas_Column_Density variable
    nf90_stat = NF90_INQ_VARID( groupid,BROAD_COL_DENS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BROAD_COL_DENS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Broadening_Gas_Column_Density )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BROAD_COL_DENS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Frequency_Interval variable
    nf90_stat = NF90_INQ_VARID( groupid,FREQ_INTERVAL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//FREQ_INTERVAL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Frequency_Interval )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//FREQ_INTERVAL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Begin_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,BEGIN_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BEGIN_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Begin_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BEGIN_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...End_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,END_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//END_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%End_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//END_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Boundary_Temperature variable
    nf90_stat = NF90_INQ_VARID( groupid,BDRY_TEMP_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BDRY_TEMP_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Boundary_Temperature )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BDRY_TEMP_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Boundary_Emissivity variable
    nf90_stat = NF90_INQ_VARID( groupid,BDRY_EMIS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BDRY_EMIS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Boundary_Emissivity )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BDRY_EMIS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Molecules variable
    nf90_stat = NF90_INQ_VARID( groupid,N_MOLECULES_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//N_MOLECULES_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%n_Molecules )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//N_MOLECULES_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...n_Layer variable
    nf90_stat = NF90_INQ_VARID( groupid,N_LAYER_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//N_LAYER_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%n_Layer )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//N_LAYER_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...OD_Layering_Control_Flag variable
    nf90_stat = NF90_INQ_VARID( groupid,OD_LAYER_FLAG_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//OD_LAYER_FLAG_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%OD_Layering_Control_Flag )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//OD_LAYER_FLAG_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Calculation_Date variable
    nf90_stat = NF90_INQ_VARID( groupid,CALC_DATE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//CALC_DATE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Calculation_Date )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//CALC_DATE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Calculation_Time variable
    nf90_stat = NF90_INQ_VARID( groupid,CALC_TIME_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//CALC_TIME_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%Calculation_Time )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//CALC_TIME_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...ancillary variable
    nf90_stat = NF90_INQ_VARID( groupid,ANCILLARY_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ANCILLARY_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%ancillary )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ANCILLARY_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...hirac variable
    nf90_stat = NF90_INQ_VARID( groupid,HIRAC_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//HIRAC_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%hirac )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//HIRAC_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...lblf4 variable
    nf90_stat = NF90_INQ_VARID( groupid,LBLF4_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LBLF4_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%lblf4 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LBLF4_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...xscnt variable
    nf90_stat = NF90_INQ_VARID( groupid,XSCNT_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//XSCNT_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%xscnt )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//XSCNT_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...aersl variable
    nf90_stat = NF90_INQ_VARID( groupid,AERSL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//AERSL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%aersl )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//AERSL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...emit variable
    nf90_stat = NF90_INQ_VARID( groupid,EMIT_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//EMIT_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%emit )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//EMIT_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...scan variable
    nf90_stat = NF90_INQ_VARID( groupid,SCAN_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SCAN_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%scan )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SCAN_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...plot variable
    nf90_stat = NF90_INQ_VARID( groupid,PLOT_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//PLOT_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%plot )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//PLOT_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...path variable
    nf90_stat = NF90_INQ_VARID( groupid,PATH_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//PATH_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%path )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//PATH_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...jrad variable
    nf90_stat = NF90_INQ_VARID( groupid,JRAD_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//JRAD_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%jrad )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//JRAD_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...test variable
    nf90_stat = NF90_INQ_VARID( groupid,TEST_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//TEST_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%test )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TEST_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...merge variable
    nf90_stat = NF90_INQ_VARID( groupid,MERGE_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//MERGE_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%merge )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//MERGE_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...scnid variable
    nf90_stat = NF90_INQ_VARID( groupid,SCNID_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SCNID_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%scnid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SCNID_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...hwhm variable
    nf90_stat = NF90_INQ_VARID( groupid,HWHM_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//HWHM_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%hwhm )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//HWHM_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...idabs variable
    nf90_stat = NF90_INQ_VARID( groupid,IDABS_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//IDABS_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%idabs )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//IDABS_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...atm variable
    nf90_stat = NF90_INQ_VARID( groupid,ATM_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//ATM_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%atm )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//ATM_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...layr1 variable
    nf90_stat = NF90_INQ_VARID( groupid,LAYR1_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//LAYR1_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%layr1 )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//LAYR1_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...nlayr variable
    nf90_stat = NF90_INQ_VARID( groupid,NLAYR_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//NLAYR_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Fhdr%nlayr )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//NLAYR_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION WriteVariables

  ! Function to read the global/group attributes.

  FUNCTION ReadGAtts( &
    ncid   , &
    Release, &
    Version, &
    Title  , &
    History, &
    Comment) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long),           INTENT(IN)  :: ncid   
    INTEGER      , OPTIONAL, INTENT(OUT) :: Release
    INTEGER      , OPTIONAL, INTENT(OUT) :: Version
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Title  
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: History
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Comment
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Fhdr_netCDF_IO::ReadGAtts'
    ! Local variables
    CHARACTER(ML)   :: msg
    CHARACTER(256)  :: gattname
    CHARACTER(5000) :: gattstring
    INTEGER(Long) :: nf90_stat

    ! Set up
    err_stat = SUCCESS

    ! The global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Title = gattstring(1:MIN(LEN(Title), LEN_TRIM(gattstring)))
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      History = gattstring(1:MIN(LEN(History), LEN_TRIM(gattstring)))
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Comment = gattstring(1:MIN(LEN(Comment), LEN_TRIM(gattstring)))
    END IF

  END FUNCTION ReadGAtts

  ! Function to write the global/group attributes.

  FUNCTION WriteGAtts( &
    ncid   , &
    Release, &
    Version, &
    Title  , &
    History, &
    Comment) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long),           INTENT(IN) :: ncid   
    INTEGER      , OPTIONAL, INTENT(IN) :: Release
    INTEGER      , OPTIONAL, INTENT(IN) :: Version
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Title  
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: History
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Comment
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Fhdr_netCDF_IO::WriteGAtts'
    CHARACTER(*), PARAMETER :: WRITE_MODULE_HISTORY_GATTNAME   = 'write_module_history'
    CHARACTER(*), PARAMETER :: CREATION_DATE_AND_TIME_GATTNAME = 'creation_date_and_time'
    ! Local variables
    CHARACTER(ML) :: msg
    CHARACTER(ML) :: gattname
    CHARACTER(8)  :: cdate
    CHARACTER(10) :: ctime
    CHARACTER(5)  :: czone
    INTEGER(Long) :: nf90_stat

    ! Set up
    err_stat = SUCCESS
    msg = ''

    ! Mandatory global attributes
    ! ...Software ID
    gattname = WRITE_MODULE_HISTORY_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),MODULE_VERSION_ID )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Creation date
    CALL DATE_AND_TIME( cdate, ctime, czone )
    gattname = CREATION_DATE_AND_TIME_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname), &
                              cdate(1:4)//'/'//cdate(5:6)//'/'//cdate(7:8)//', '// &
                              ctime(1:2)//':'//ctime(3:4)//':'//ctime(5:6)//' '// &
                              czone//'UTC' )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF


    ! Optional global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Title )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),History )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Comment )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF

  END FUNCTION WriteGAtts