!
! Auto-generated by gen_nc.rb, $Revision: 35240 $
!


  ! Function to define the dimensions in a group.

  FUNCTION DefineDimensions( &
    LBLRTM_Layer   , &
    GroupId        , &
    n_Points_DimId , &
    n_Spectra_DimId) &
  RESULT( err_stat )
    ! Arguments
    TYPE(LBLRTM_Layer_type), INTENT(IN)  :: LBLRTM_Layer   
    INTEGER(Long)          , INTENT(IN)  :: GroupId        
    INTEGER(Long)          , INTENT(OUT) :: n_Points_DimId 
    INTEGER(Long)          , INTENT(OUT) :: n_Spectra_DimId
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Layer_netCDF_IO::DefineDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: dimvalue

    ! Setup
    err_stat = SUCCESS

    ! Define the dimensions
    ! ...Number of spectral points
    dimvalue = INT(LBLRTM_Layer%n_Points,Long)
    nf90_stat = NF90_DEF_DIM( groupid,POINTS_DIMNAME,dimvalue,n_Points_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//POINTS_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Number of spectra
    dimvalue = INT(LBLRTM_Layer%n_Spectra,Long)
    nf90_stat = NF90_DEF_DIM( groupid,SPECTRA_DIMNAME,dimvalue,n_Spectra_DimId )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SPECTRA_DIMNAME//' dimension - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineDimensions

  ! Function to get the dimensions in a group.

  FUNCTION ReadDimensions( &
    GroupId  , &
    n_Points , &
    n_Spectra) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long), INTENT(IN)  :: GroupId  
    INTEGER      , INTENT(OUT) :: n_Points 
    INTEGER      , INTENT(OUT) :: n_Spectra
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Layer_netCDF_IO::ReadDimensions'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: dimid
    INTEGER(Long) :: dimvalue

    ! Setup
    err_stat = SUCCESS

    ! Get the group dimensions
    ! ...n_Points dimension
    nf90_stat = NF90_INQ_DIMID( groupid,POINTS_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//POINTS_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//POINTS_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Points = dimvalue
    ! ...n_Spectra dimension
    nf90_stat = NF90_INQ_DIMID( groupid,SPECTRA_DIMNAME,dimid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring dimension ID for '//SPECTRA_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_INQUIRE_DIMENSION( groupid,dimid,Len=dimvalue )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading dimension value for '//SPECTRA_DIMNAME//' - '// &
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    n_Spectra = dimvalue

  END FUNCTION ReadDimensions

  ! Function to define the variables in a group.

  FUNCTION DefineVariables( &
    GroupId        , &
    n_Points_DimId , &
    n_Spectra_DimId) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long), INTENT(IN) :: GroupId        
    INTEGER(Long), INTENT(IN) :: n_Points_DimId 
    INTEGER(Long), INTENT(IN) :: n_Spectra_DimId
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Layer_netCDF_IO::DefineVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid
    INTEGER(Long) :: put_stat(4)

    ! Setup
    err_stat = SUCCESS

    ! Define the variables
    ! ...Begin_Frequency variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      BEGIN_FREQ_VARNAME, &
      BEGIN_FREQ_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//BEGIN_FREQ_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,BEGIN_FREQ_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,BEGIN_FREQ_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,BEGIN_FREQ_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,BEGIN_FREQ_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BEGIN_FREQ_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...End_Frequency variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      END_FREQ_VARNAME, &
      END_FREQ_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//END_FREQ_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,END_FREQ_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,END_FREQ_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,END_FREQ_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,END_FREQ_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//END_FREQ_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Frequency_Interval variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      FREQ_INTERVAL_VARNAME, &
      FREQ_INTERVAL_TYPE, &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//FREQ_INTERVAL_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,FREQ_INTERVAL_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,FREQ_INTERVAL_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,FREQ_INTERVAL_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,FREQ_INTERVAL_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//FREQ_INTERVAL_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Spectrum variable
    nf90_stat = NF90_DEF_VAR( groupid, &
      SPECTRUM_VARNAME, &
      SPECTRUM_TYPE, &
      dimids=(/n_points_dimid, n_spectra_dimid/), &
      varid=varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error defining '//SPECTRUM_VARNAME//' variable - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    put_stat(1) = NF90_PUT_ATT( groupid,varid,LONGNAME_ATTNAME   ,SPECTRUM_LONGNAME    )
    put_stat(2) = NF90_PUT_ATT( groupid,varid,DESCRIPTION_ATTNAME,SPECTRUM_DESCRIPTION )
    put_stat(3) = NF90_PUT_ATT( groupid,varid,UNITS_ATTNAME      ,SPECTRUM_UNITS       )
    put_stat(4) = NF90_PUT_ATT( groupid,varid,FILLVALUE_ATTNAME  ,SPECTRUM_FILLVALUE   )
    IF ( ANY(put_stat /= NF90_NOERR) ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SPECTRUM_VARNAME//' variable attributes'
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION DefineVariables

  ! Function to read the variables from a group.

  FUNCTION ReadVariables( &
    LBLRTM_Layer, &
    GroupId     ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(LBLRTM_Layer_type), INTENT(IN OUT) :: LBLRTM_Layer
    INTEGER(Long)          , INTENT(IN)     :: GroupId     
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Layer_netCDF_IO::ReadVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid

    ! Setup
    err_stat = SUCCESS

    ! Read the LBLRTM_Layer data
    ! ...Begin_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,BEGIN_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BEGIN_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Layer%Begin_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//BEGIN_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...End_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,END_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//END_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Layer%End_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//END_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Frequency_Interval variable
    nf90_stat = NF90_INQ_VARID( groupid,FREQ_INTERVAL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//FREQ_INTERVAL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Layer%Frequency_Interval )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//FREQ_INTERVAL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Spectrum variable
    nf90_stat = NF90_INQ_VARID( groupid,SPECTRUM_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SPECTRUM_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_GET_VAR( groupid,varid,LBLRTM_Layer%Spectrum )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error reading '//SPECTRUM_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION ReadVariables

  ! Function to write the variables in a group.

  FUNCTION WriteVariables( &
    LBLRTM_Layer, &
    GroupId     ) &
  RESULT( err_stat )
    ! Arguments
    TYPE(LBLRTM_Layer_type), INTENT(IN) :: LBLRTM_Layer
    INTEGER(Long)          , INTENT(IN) :: GroupId     
    ! Function result
    INTEGER :: err_stat
    ! Function parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Layer_netCDF_IO::WriteVariables'
    ! Function variables
    CHARACTER(ML) :: msg
    INTEGER(Long) :: nf90_stat
    INTEGER(Long) :: varid

    ! Setup
    err_stat = SUCCESS

    ! Write the variables
    ! ...Begin_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,BEGIN_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//BEGIN_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Layer%Begin_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//BEGIN_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...End_Frequency variable
    nf90_stat = NF90_INQ_VARID( groupid,END_FREQ_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//END_FREQ_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Layer%End_Frequency )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//END_FREQ_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Frequency_Interval variable
    nf90_stat = NF90_INQ_VARID( groupid,FREQ_INTERVAL_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//FREQ_INTERVAL_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Layer%Frequency_Interval )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//FREQ_INTERVAL_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Spectrum variable
    nf90_stat = NF90_INQ_VARID( groupid,SPECTRUM_VARNAME,varid )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error inquiring for '//SPECTRUM_VARNAME//&
            ' variable ID - '//TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    !WRITE(*,*) "Spectrum: ", LBLRTM_Layer%Spectrum
    WRITE(*,*) "groupid: ", groupid
    WRITE(*,*) "varid: ", varid
    WRITE(*,*) "Size of the spectrum: ", SIZE(LBLRTM_Layer%Spectrum,1), SIZE(LBLRTM_Layer%Spectrum,2), LBLRTM_Layer%n_Points, LBLRTM_Layer%n_Spectra
    nf90_stat = NF90_PUT_VAR( groupid,varid,LBLRTM_Layer%Spectrum(1:LBLRTM_Layer%n_Points,1:LBLRTM_Layer%n_Spectra) )
    WRITE(*,*) "Writing spectrum..."
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//SPECTRUM_VARNAME//' - '//&
            TRIM(NF90_STRERROR( nf90_stat ))
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF

  END FUNCTION WriteVariables

  ! Function to read the global/group attributes.

  FUNCTION ReadGAtts( &
    ncid   , &
    Release, &
    Version, &
    Title  , &
    History, &
    Comment) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long),           INTENT(IN)  :: ncid   
    INTEGER      , OPTIONAL, INTENT(OUT) :: Release
    INTEGER      , OPTIONAL, INTENT(OUT) :: Version
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Title  
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: History
    CHARACTER(*) , OPTIONAL, INTENT(OUT) :: Comment
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Layer_netCDF_IO::ReadGAtts'
    ! Local variables
    CHARACTER(ML)   :: msg
    CHARACTER(256)  :: gattname
    CHARACTER(5000) :: gattstring
    INTEGER(Long) :: nf90_stat

    ! Set up
    err_stat = SUCCESS

    ! The global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Title = gattstring(1:MIN(LEN(Title), LEN_TRIM(gattstring)))
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      History = gattstring(1:MIN(LEN(History), LEN_TRIM(gattstring)))
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME; gattstring = ''
      nf90_stat = NF90_GET_ATT( ncid,NF90_GLOBAL,TRIM(gattname),gattstring )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error reading '//TRIM(gattname)//' attribute - '// &
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
      CALL StrClean( gattstring )
      Comment = gattstring(1:MIN(LEN(Comment), LEN_TRIM(gattstring)))
    END IF

  END FUNCTION ReadGAtts

  ! Function to write the global/group attributes.

  FUNCTION WriteGAtts( &
    ncid   , &
    Release, &
    Version, &
    Title  , &
    History, &
    Comment) &
  RESULT( err_stat )
    ! Arguments
    INTEGER(Long),           INTENT(IN) :: ncid   
    INTEGER      , OPTIONAL, INTENT(IN) :: Release
    INTEGER      , OPTIONAL, INTENT(IN) :: Version
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Title  
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: History
    CHARACTER(*) , OPTIONAL, INTENT(IN) :: Comment
    ! Function result
    INTEGER :: err_stat
    ! Local parameters
    CHARACTER(*), PARAMETER :: ROUTINE_NAME = 'LBLRTM_Layer_netCDF_IO::WriteGAtts'
    CHARACTER(*), PARAMETER :: WRITE_MODULE_HISTORY_GATTNAME   = 'write_module_history'
    CHARACTER(*), PARAMETER :: CREATION_DATE_AND_TIME_GATTNAME = 'creation_date_and_time'
    ! Local variables
    CHARACTER(ML) :: msg
    CHARACTER(ML) :: gattname
    CHARACTER(8)  :: cdate
    CHARACTER(10) :: ctime
    CHARACTER(5)  :: czone
    INTEGER(Long) :: nf90_stat

    ! Set up
    err_stat = SUCCESS
    msg = ''

    ! Mandatory global attributes
    ! ...Software ID
    gattname = WRITE_MODULE_HISTORY_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),MODULE_VERSION_ID )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF
    ! ...Creation date
    CALL DATE_AND_TIME( cdate, ctime, czone )
    gattname = CREATION_DATE_AND_TIME_GATTNAME
    nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname), &
                              cdate(1:4)//'/'//cdate(5:6)//'/'//cdate(7:8)//', '// &
                              ctime(1:2)//':'//ctime(3:4)//':'//ctime(5:6)//' '// &
                              czone//'UTC' )
    IF ( nf90_stat /= NF90_NOERR ) THEN
      err_stat = FAILURE
      msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
            TRIM(NF90_STRERROR( nf90_stat ) )
      CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
    END IF


    ! Optional global attributes
    ! ...The Release
    IF ( PRESENT(Release) ) THEN
      gattname = RELEASE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Release )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Version
    IF ( PRESENT(Version) ) THEN
      gattname = VERSION_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Version )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Title
    IF ( PRESENT(Title) ) THEN
      gattname = TITLE_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Title )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The History
    IF ( PRESENT(History) ) THEN
      gattname = HISTORY_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),History )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF
    ! ...The Comment
    IF ( PRESENT(Comment) ) THEN
      gattname = COMMENT_GATTNAME
      nf90_stat = NF90_PUT_ATT( ncid,NF90_GLOBAL,TRIM(gattname),Comment )
      IF ( nf90_stat /= NF90_NOERR ) THEN
        err_stat = FAILURE
        msg = 'Error writing '//TRIM(gattname)//' attribute - '//&
              TRIM(NF90_STRERROR( nf90_stat ) )
        CALL Display_Message( ROUTINE_NAME,msg,err_stat ); RETURN
      END IF
    END IF

  END FUNCTION WriteGAtts
