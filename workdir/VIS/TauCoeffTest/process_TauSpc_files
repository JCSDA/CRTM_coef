#!/bin/sh
#------------------------------------------------------------------------------
#
# NAME:
#       process_TauSpc_files
#
# PURPOSE:
#       Shell script to convolve the output LBL transmittances with the various
#       instrument SRFs.
#
# CATEGORY:
#       Transmittance Production
#
# LANGUAGE:
#       Bourne shell script
#
# CALLING SEQUENCE:
#       process_TauSpc_file -h
#
# CREATION HISTORY:
#       Written by:     Paul van Delst, CIMSS/SSEC 04-Jun-2002
#                       paul.vandelst@ssec.wisc.edu
#
#  Copyright (C) 2002 Paul van Delst
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#                        -- USAGE DESCRIPTION FUNCTION --
#-------------------------------------------------------------------------------

usage()
{
  echo
  echo " Usage: process_TauSpc_files [-hn] [-a angle_begin[:angle_end]] [-d direction]"
  echo "                             [-p profile_begin[:profile_end]]"
  echo "                             [-q batch_queue] [-t TAPE3_index_list]"
  echo
  echo "   -h           Print this message and exit"
  echo
  echo "   -a           Use this option to specify the begin and end angle limits"
  echo "                for the calculation."
  echo "                Valid values are:"
  echo "                  1 == SEC(z)=1.00, z= 0.000"
  echo "                  2 == SEC(z)=1.25, z=36.870"
  echo "                  3 == SEC(z)=1.50, z=48.190"
  echo "                  4 == SEC(z)=1.75, z=55.150"
  echo "                  5 == SEC(z)=2.00, z=60.000"
  echo "                  6 == SEC(z)=2.25, z=63.612"
  echo "                  7 == SEC(z)=3.00, z=70.529"
  echo "                Default action is determined by defaults file."
  echo
  echo "   -n           Create the processing shell scripts but do not submit"
  echo "                the to the batch processor."
  echo
  echo "   -d           Use this option to specify the direction to process."
  echo "                Valid direction indicators are:"
  echo "                   up     == only process upwelling case."
  echo "                   down   == only process downwelling case."
  echo "                   updown == process both up and downwelling cases."
  echo "                Default value is updown."
  echo
  echo "   -p           Use this option to specify the begin and end profile limits"
  echo "                for the calculation."
  echo "                Default action is to process profile #1 -> #1."
  echo
  echo "   -q           Use this option to specify the batch queue to which the"
  echo "                generated script file will be submitted."
  echo "                Default action is determined from the defaults file."
  echo
  echo "   -t           Use this option to specify the LBLRTM TAPE3 index list"
  echo "                to process."
  echo "                Valid TAPE3 indices are:"
  echo "                   1-7 == individual molecule numbers (no continua)"
  echo "                   8   == all first seven molecules (no continua)"
  echo "                   9   == continua only"
  echo "                  10   == all first seven molecules (and their continua)"
  echo "                  11   == water vapor + ozone only (and their continua)"
  echo "                  12   == water vapor only (and it's continua)"
  echo "                  13   == dry gases. Everything but h2o and o3 (and their continua)"
  echo "                  14   == ozone only (and it's continua)"
  echo "                  15   == water vapor continua only"
  echo "                If specifying more than one index, the list *must* be enclosed"
  echo "                in quotes."
  echo "                Default action is determined by defaults file."
  echo
}



#-------------------------------------------------------------------------------
#                    -- THE SCRIPT NAME FOR ERROR MESSAGES --
#-------------------------------------------------------------------------------

SCRIPT_NAME="`basename $0`"
Create_ProcessControl_File=../../../src/TauProd/Infrared/Create_ProcessControl_File/Create_ProcessControl_File
Convolve_TauSpc_with_SRF=../../../src/TauProd/Infrared/Convolve_TauSpc/Convolve_TauSpc
Check_ProcessControl_File=../../../src/TauProd/Infrared/Check_ProcessControl_File/Check_ProcessControl_File
DF_INDEX=1
root_dir=$(pwd)

#-------------------------------------------------------------------------------
#                        -- SET THE PROCESSING DEFAULTS --
#-------------------------------------------------------------------------------

  # --------------------------------
  # The default direction to process
  # See -d option
  # --------------------------------

  DIRECTION_TYPE="updown"
  DIRECTION_TYPE="up"


  # -----------------------------------------
  # The default processing queue submit value
  # See -n option
  # -----------------------------------------

  QUEUE_SUBMIT="yes"


  # -----------------
  # The defaults file
  # -----------------

  DEFAULTS_FILE="Transmittance_Production.processing_defaults"
  DEFAULTS_LIST="QUEUE TAPE3_LIST PROFILE1 PROFILE2 PROFILE_SET_NUMBER PROFILE_SET_ID ANGLE1 ANGLE2"

  if [ ! -f ${DEFAULTS_FILE} ]; then
    echo "${SCRIPT_NAME}: Defaults file ${DEFAULTS_FILE} not found!"
    exit 2
  fi

  for ITEM_NAME in ${DEFAULTS_LIST}; do

    ITEM_VALUE=`grep ":${ITEM_NAME}:" ${DEFAULTS_FILE} | cut -d":" -f3`

    case "${ITEM_NAME}" in

      # -- Default batch processing queue
      QUEUE) QUEUE=${ITEM_VALUE};;

      # -- The TAPE3 list
      TAPE3_LIST) TAPE3_LIST=${ITEM_VALUE};;

      # -- Default PROFILE limits and ID
      PROFILE1) PROFILE1=${ITEM_VALUE};;
      PROFILE2) PROFILE2=${ITEM_VALUE};;
      PROFILE_SET_NUMBER) PROFILE_SET_NUMBER=${ITEM_VALUE};;
      PROFILE_SET_ID) PROFILE_SET_ID=${ITEM_VALUE};;

      # -- Default zenith angle limits
      ANGLE1) ANGLE1=${ITEM_VALUE};;
      ANGLE2) ANGLE2=${ITEM_VALUE};;

      *) ;; # Ignore invalid default
    esac

  done


#-------------------------------------------------------------------------------
#                       -- PARSE THE COMMAND LINE OPTIONS --
#-------------------------------------------------------------------------------

  while getopts :hna:d:p:q:t: OPTVAL; do


    # --------------------------------------------
    # If option argument looks like another option
    # exit the loop
    # --------------------------------------------

    case ${OPTARG} in
      -*) break;;
    esac


    # ----------------------------
    # Parse the valid options here
    # ----------------------------

    case ${OPTVAL} in
      a)  ANGLE_LIMITS=${OPTARG}
          ANGLE1=`echo ${ANGLE_LIMITS} | cut -d: -f1`
          ANGLE2=`echo ${ANGLE_LIMITS} | cut -d: -f2`;;
      d)  DIRECTION_TYPE=${OPTARG};;
      n)  QUEUE_SUBMIT="no";;
      p)  PROFILE_LIMITS=${OPTARG}
          PROFILE1=`echo ${PROFILE_LIMITS} | cut -d: -f1`
          PROFILE2=`echo ${PROFILE_LIMITS} | cut -d: -f2`;;
      q)  QUEUE=${OPTARG};;
      t)  TAPE3_LIST=${OPTARG};;
      h)  usage
          exit 0;;
      :|\?) OPTVAL=${OPTARG}
            break;;
    esac

  done


  # ----------------------------
  # Remove the options processed
  # ----------------------------

  shift `expr ${OPTIND} - 1`


  # ------------------------------------------
  # Now output invalidities based on OPTVAL
  # Need to do this as getopts does not handle
  # the situations where an option is passed
  # as an argument to another option.
  # ------------------------------------------

  case ${OPTVAL} in


    # --------------------------------------------
    # If OPTVAL contains nothing, then all options
    # have been successfully parsed and all that
    # remains are the positional parameters
    # --------------------------------------------

    \?) if [ $# -ne 0 ]; then
          ( echo "${SCRIPT_NAME}: Invalid argument(s) $*" ; usage ) | more
          exit 2
        fi;;


    # ------------------------------------
    # Valid options, but missing arguments
    # ------------------------------------

    a|d|p|q|t) ( echo "${SCRIPT_NAME}: '-${OPTVAL}' option requires an argument" ; usage ) | more
             exit 2;;


    # --------------
    # Invalid option
    # --------------

    ?) ( echo "${SCRIPT_NAME}: Invalid option '-${OPTARG}'" ; usage ) | more
       exit 2;;

  esac



#-------------------------------------------------------------------------------
#                  -- ASSIGN THE CURRENT PROCESSING VALUES --
#-------------------------------------------------------------------------------

  # ---------------------
  # Directory definitions
  # ---------------------

  ROOT_DIRECTORY=${PWD}
  SRF_DIRECTORY=${ROOT_DIRECTORY}/oSRF_Data
  SENSORINFO_DIRECTORY=${ROOT_DIRECTORY}


  # -------------------------------
  #  The atmospheric path direction
  #  1 == upwelling
  #  2 == downwelling
  # -------------------------------

  case ${DIRECTION_TYPE} in

    # -- upwelling only
    up) DIRECTION_LIST="1";;

    # -- downwelling only
    down) DIRECTION_LIST="2";;

    # -- Both
    updown) DIRECTION_LIST="1 2";;

    # -- Invalid
    *) ( echo "${SCRIPT_NAME}: Invalid DIRECTION" ; usage ) | more
       exit 2;;

  esac


  # -----------------------
  # The profile number list
  # -----------------------

  PROFILE_LIST=""
  PROFILE=${PROFILE1}

  # -- Loop over profiles
  while [ ${PROFILE} -le ${PROFILE2} ]; do

    # -- Define the profile ID tag
    if [ ${PROFILE} -lt 10 ]; then
      PROFILE_NUMBER="0${PROFILE}"
    else
      PROFILE_NUMBER="${PROFILE}"
    fi

    # -- Construct the list
    PROFILE_LIST="${PROFILE_LIST} ${PROFILE_NUMBER}"

    # -- Increment profile number
    PROFILE=`expr ${PROFILE} + 1`

  done


  # ---------------------
  # The angle number list
  # ---------------------

  ANGLE_LIST=""
  ANGLE=${ANGLE1}

  # -- Loop over angles
  while [ ${ANGLE} -le ${ANGLE2} ]; do

    # -- Construct the list
    ANGLE_LIST="${ANGLE_LIST} ${ANGLE}"

    # -- Increment angle number
    ANGLE=`expr ${ANGLE} + 1`

  done



  #------------------------------------------------------------------------------
  #                 -- BEGIN THE MAIN LOOP OVER PROFILES --
  #------------------------------------------------------------------------------

  for PROFILE_NUMBER in ${PROFILE_LIST}; do


    # ------------------------------------------------------
    # Change to the required profile directory if it exists.
    # Otherwise go to next profile in the list
    # ------------------------------------------------------

    if [ -d profile${PROFILE_NUMBER} ]; then
      cd profile${PROFILE_NUMBER}
    else
      continue
    fi

    # -- Save the current directory
    PROFILE_DIRECTORY=${PWD}


    
    #----------------------------------------------------------------------------
    #                    -- BEGIN THE LOOP OVER ANGLES --
    #----------------------------------------------------------------------------

    for ANGLE_NUMBER in ${ANGLE_LIST}; do


      # ----------------------------------------------------
      # Change to the required angle directory if it exists.
      # Otherwise go to next angle in the list
      # ----------------------------------------------------

      if [ -d angle${ANGLE_NUMBER} ]; then
        cd angle${ANGLE_NUMBER}
      else
        continue
      fi

      # -- Save the current directory
      ANGLE_DIRECTORY=${PWD}



      #--------------------------------------------------------------------------
      #                   -- BEGIN THE LOOP OVER MOLECULES --
      #--------------------------------------------------------------------------

      for MOLECULE_SET_NUMBER in ${TAPE3_LIST}; do


        # -----------------------------
        # Get the molecule set tag name
        # -----------------------------

        #MOLECULE_SET_TAG=`./Define_Molecule_Tag ${MOLECULE_SET_NUMBER}`
        MOLECULE_SET_TAG=$(/scratch/users/pstegmann/TauCoeffTest/Define_Molecule_Tag ${MOLECULE_SET_NUMBER})

        if [ $? -ne 0 ]; then
          echo "${SCRIPT_NAME}: Error constructing molecule tag name for molecule index ${MOLECULE_SET_NUMBER}"
          continue
        fi


        # -----------------------------------------------------------
        # Change to the required molecule set directory if it exists.
        # Otherwise go to next molecule set in the list
        # -----------------------------------------------------------

        if [ -d ${MOLECULE_SET_TAG} ]; then
          cd ${MOLECULE_SET_TAG}
        else
          continue
        fi


        # ----------------------------------------
        # Link in all the available SRF data files
        # ----------------------------------------

        for SRF_DATA_FILE in `ls ${SRF_DIRECTORY}/*.osrf.nc`; do
          if [ -f ${SRF_DATA_FILE} ]; then
            ln -sf ${SRF_DATA_FILE} .
          else
            echo "${SCRIPT_NAME}: SRF data file ${SRF_DATA_FILE} not found!"
            exit 2
          fi
        done


        # ---------------------------
        # Link in the SensorInfo file
        # ---------------------------

        SENSORINFO_FILE="SensorInfo"

        if [ ! -f ${SENSORINFO_FILE} ]; then
          ln -sf ${SENSORINFO_DIRECTORY}/${SENSORINFO_FILE} .
        fi


        # -----------------------
        # Create job command file
        # -----------------------
        JOB_TAG="Profile${PROFILE_NUMBER}_Angle${ANGLE_NUMBER}_${MOLECULE_SET_TAG}"
        JOB_COMMAND_FILE="Process_TauSpc_${JOB_TAG}.jcf"
        #echo "#!/bin/sh" > ${JOB_COMMAND_FILE}
        EXEC=""
        
        # --------------------------------
        # Loop over the allowed directions
        # --------------------------------
        
        for DIRECTION_NUMBER in ${DIRECTION_LIST}; do

          case ${DIRECTION_NUMBER} in
            1) DIRECTION_NAME="upwelling";;
            2) DIRECTION_NAME="downwelling";;
          esac


          # ------------------------------
          # Define an identifying file tag
          # ------------------------------

          FILE_TAG="angle${ANGLE_NUMBER}_${MOLECULE_SET_TAG}.${DIRECTION_NAME}"


          # -----------------------------
          # Define the error log filename
          # -----------------------------

          ERROR_LOG_FILE="Error_Log.${FILE_TAG}"


          # ------------------------------
          # Begin constructing script file
          # ------------------------------

          SCRIPT_FILE="process_TauSpc_files.${FILE_TAG}.sh"
      
          # Remove the script file to avoid appending to the currentfile
          # Added by Isaac Moradi
          \rm -f ${SCRIPT_FILE}          


          echo "#!/bin/sh" >> ${SCRIPT_FILE}


          # ------------------------------------
          # Add time stamp to the error log file
          # ------------------------------------

          echo >> ${SCRIPT_FILE}; echo >> ${SCRIPT_FILE}
          echo "# --------------------------------------" >> ${SCRIPT_FILE}
          echo "# Add begin time stamp to error log file" >> ${SCRIPT_FILE}
          echo "# --------------------------------------" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "echo >> ${ERROR_LOG_FILE}; echo '--------------------------' >> ${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo "echo \"Processing run started at:  \`date\`\" >> ${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          
          # -----------------------------------------
          # Create a process control file if required
          # -----------------------------------------

          # -- Process Control filename
          PROCESSCONTROL_FILE="ProcessControl.${FILE_TAG}"

          # -- Add commands to script file
          echo >> ${SCRIPT_FILE}; echo >> ${SCRIPT_FILE}
          echo "# --------------------------------------------" >> ${SCRIPT_FILE}
          echo "# Create a Process Control file if there is no" >> ${SCRIPT_FILE}
          echo "# signal AND lock file"  >> ${SCRIPT_FILE}
          echo "# --------------------------------------------" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "if [ ! -f ${PROCESSCONTROL_FILE}.signal -a ! -f ${PROCESSCONTROL_FILE}.lock ]; then" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Create the lock file" >> ${SCRIPT_FILE}
          echo "  touch ${PROCESSCONTROL_FILE}.lock" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Create the Process Control file" >> ${SCRIPT_FILE}
          # Changed the following files as I amended Create_ProcessControl_File Changed by Isaac Moradi
          # Inputs SENSORINFO_FILE SRF_FILEPATH INDEX_FREQUENCY OUTPUT
          echo "${Create_ProcessControl_File} ${SENSORINFO_FILE} 2 ./ ${PROCESSCONTROL_FILE}" >> ${SCRIPT_FILE}
          # echo "  ${Create_ProcessControl_File} << NoMoreInput > Create_ProcessControl_File.${FILE_TAG}.log"  >> ${SCRIPT_FILE}
          # echo "${SENSORINFO_FILE}" >> ${SCRIPT_FILE}
          # echo "./" >> ${SCRIPT_FILE}
          # echo "${PROCESSCONTROL_FILE}" >> ${SCRIPT_FILE}
          # echo "NoMoreInput" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Remove the Process Control lock file" >> ${SCRIPT_FILE}
          echo "  rm ${PROCESSCONTROL_FILE}.lock 2>>${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Check that file was created cleanly" >> ${SCRIPT_FILE}
          echo "  if [ ! -f ${PROCESSCONTROL_FILE}.signal ]; then" >> ${SCRIPT_FILE}
          echo "    echo '${SCRIPT_FILE}:${PROCESSCONTROL_FILE}, profile ${PROFILE_NUMBER} creation fail' >> ${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo "    exit 2" >> ${SCRIPT_FILE}
          echo "  fi" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "fi" >> ${SCRIPT_FILE}


          # ---------------------
          # Start the convolution
          # ---------------------

          # -- Convolution process id
          CONVOLVE_TAUSPC_ID="Convolve_TauSpc_with_SRF.${FILE_TAG}"

          # -- Add commands to script file
          echo >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "# ----------------------------------------" >> ${SCRIPT_FILE}
          echo "# Start the LBL transmittance convolutions" >> ${SCRIPT_FILE}
          echo "# ----------------------------------------" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "if [ ! -f ${PROCESSCONTROL_FILE}.lock ]; then" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Create the lock file" >> ${SCRIPT_FILE}
          echo "  touch ${PROCESSCONTROL_FILE}.lock" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Begin the processing" >> ${SCRIPT_FILE}
          #      Select the DEPENDENT PROFILE SET
          # 1) UMBC profile set
          # 2) CIMSS profile set
          # 3) ECMWF profile set
          # 4) UMBC_extended profile set
          # 5) ECMWF83 profile set
          # 6) ECMWF42 profile set

          # Enter the MOLECULE SET to process: 10
          # Enter the PROFILE NUMBER to process: 1
          # Enter the ANGLE NUMBER to process: 1
          # Select atmospheric path
          # 1) radiance   
          # 2) upwelling
          # Enter the ProcessControl filename
	  echo "  ${Convolve_TauSpc_with_SRF} ${PROFILE_SET_NUMBER} ${MOLECULE_SET_NUMBER} ${PROFILE_NUMBER} ${ANGLE_NUMBER} ${DF_INDEX} ${DIRECTION_NUMBER} ${PROCESSCONTROL_FILE}"  >> ${SCRIPT_FILE}
#          echo "  ${Convolve_TauSpc_with_SRF} ${PROFILE_SET_NUMBER} ${MOLECULE_SET_NUMBER} ${PROFILE_NUMBER} ${ANGLE_NUMBER} ${DF_INDEX} ${DIRECTION_NUMBER}  ${PROCESSCONTROL_FILE}"  >> ${SCRIPT_FILE}
#          echo "  ${Convolve_TauSpc_with_SRF} << NoMoreInput >> ${PROCESSCONTROL_FILE}.log" >> ${SCRIPT_FILE}
#          echo "${PROFILE_SET_NUMBER}" >> ${SCRIPT_FILE}
#          echo "${MOLECULE_SET_NUMBER}" >> ${SCRIPT_FILE}
#          echo "${PROFILE_NUMBER}" >> ${SCRIPT_FILE}
#          echo "${ANGLE_NUMBER}" >> ${SCRIPT_FILE}
#          echo "${DIRECTION_NUMBER}" >> ${SCRIPT_FILE}
#          echo "${PROCESSCONTROL_FILE}" >> ${SCRIPT_FILE}
#          echo "NoMoreInput" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Check that convolution run completed successfully" >> ${SCRIPT_FILE}
          echo "  if [ ! -f ${CONVOLVE_TAUSPC_ID}.signal ]; then" >> ${SCRIPT_FILE}
          echo "    echo '${SCRIPT_FILE}:${CONVOLVE_TAUSPC_ID}, profile ${PROFILE_NUMBER} run fail' >> ${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo "    rm ${PROCESSCONTROL_FILE}.lock 2>>${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo "    exit 2" >> ${SCRIPT_FILE}
          echo "  else" >> ${SCRIPT_FILE}
          echo "    rm -f ${CONVOLVE_TAUSPC_ID}.signal 2>>${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo "  fi" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Pause for a bit" >> ${SCRIPT_FILE}
          echo "  sleep 5" >> ${SCRIPT_FILE}


          # ------------------------------
          # Check the Process Control File
          # ------------------------------

          # -- Add commands to script file
          echo >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # ------------------------------" >> ${SCRIPT_FILE}
          echo "  # Check the Process Control file" >> ${SCRIPT_FILE}
          echo "  # ------------------------------" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
#          echo "  ${Check_ProcessControl_File} << NoMoreInput >> ${PROCESSCONTROL_FILE}.log" >> ${SCRIPT_FILE}
#          echo "${PROCESSCONTROL_FILE}" >> ${SCRIPT_FILE}
#          echo "NoMoreInput" >> ${SCRIPT_FILE}
          echo "${Check_ProcessControl_File} ${PROCESSCONTROL_FILE}" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Check that the delete band file creation was successful" >> ${SCRIPT_FILE}
          echo "  if [ ! -f ${PROCESSCONTROL_FILE}.deleteband.signal ]; then" >> ${SCRIPT_FILE}
          echo "    echo '${SCRIPT_FILE}:${PROCESSCONTROL_FILE}, profile ${PROFILE_NUMBER} delete band creation fail' ${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo "    rm ${PROCESSCONTROL_FILE}.lock 2>>${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo "    exit 2" >> ${SCRIPT_FILE}
          echo "  else" >> ${SCRIPT_FILE}
          echo "    rm -f ${PROCESSCONTROL_FILE}.deleteband.signal 2>/dev/null" >> ${SCRIPT_FILE}
          echo "  fi" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Delete the band data no longer required" >> ${SCRIPT_FILE}
          echo "  BAND_DELETE_FILE=${PROCESSCONTROL_FILE}.deleteband" >> ${SCRIPT_FILE}
          echo "  BAND_DIRECTORY_ROOT=./" >>  ${SCRIPT_FILE}
          echo "  BAND_DIRECTION=${DIRECTION_NAME}" >>  ${SCRIPT_FILE}
          echo '  for BAND_NUMBER in `cat ${BAND_DELETE_FILE}`; do' >> ${SCRIPT_FILE}
          echo '    BAND_DIRECTORY=${BAND_DIRECTORY_ROOT}/band${BAND_NUMBER}' >> ${SCRIPT_FILE}
          echo '    if [ -d ${BAND_DIRECTORY} ]; then' >> ${SCRIPT_FILE}
          echo '      #rm -f ${BAND_DIRECTORY}/${BAND_DIRECTION}*.nc* 2>>${ERROR_LOG_FILE}' >> ${SCRIPT_FILE}
          echo '      rm -f ${BAND_DIRECTORY}/tape* 2>>${ERROR_LOG_FILE}' >> ${SCRIPT_FILE}
          echo "    fi" >> ${SCRIPT_FILE}
          echo "  done" >> ${SCRIPT_FILE}
          echo "  rm -f ${PROCESSCONTROL_FILE}.deleteband 2>>${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "  # -- Remove the Process Control lock file" >> ${SCRIPT_FILE}
          echo "  rm -f ${PROCESSCONTROL_FILE}.lock 2>>${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
#          echo "  # -- Resubmit script if not all requested channels processed" >> ${SCRIPT_FILE}
#          echo "  if [ ! -f ${PROCESSCONTROL_FILE}.completed.signal ]; then" >> ${SCRIPT_FILE}
#          echo "    sub -w +0030 -q ${QUEUE} -o ${PROCESSCONTROL_FILE}.log ${SCRIPT_FILE} >> ${PROCESSCONTROL_FILE}.log" >> ${SCRIPT_FILE}
#          echo "  fi" >> ${SCRIPT_FILE}

          echo "fi" >> ${SCRIPT_FILE}

          # ------------------------------------
          # Add time stamp to the error log file
          # ------------------------------------

          echo >> ${SCRIPT_FILE}; echo >> ${SCRIPT_FILE}
          echo "# ------------------------------------" >> ${SCRIPT_FILE}
          echo "# Add end time stamp to error log file" >> ${SCRIPT_FILE}
          echo "# ------------------------------------" >> ${SCRIPT_FILE}
          echo >> ${SCRIPT_FILE}
          echo "echo \"Processing run finished at: \`date\`\" >> ${ERROR_LOG_FILE}" >> ${SCRIPT_FILE}


          # --------------------------------
          # Make the scriupt file executable
          # --------------------------------

          chmod 700 ${SCRIPT_FILE}
          EXEC="${EXEC} srun  --share $(pwd)/${SCRIPT_FILE}; "

          # ------------------------------------------------------------
          # Add the current script as a job step in the job command file
          # ------------------------------------------------------------
#          echo "#" >> ${JOB_COMMAND_FILE}
#          echo "# Job step for: ${SCRIPT_FILE}" >> ${JOB_COMMAND_FILE}
#          echo "# @ job_name = ${JOB_TAG}" >> ${JOB_COMMAND_FILE}
#          echo "# @ executable = ${SCRIPT_FILE}" >> ${JOB_COMMAND_FILE}
#          echo "# @ step_name = ${SCRIPT_FILE}" >> ${JOB_COMMAND_FILE}
#          echo "# @ output = ${SCRIPT_FILE}.out" >> ${JOB_COMMAND_FILE}
#          echo "# @ error = ${SCRIPT_FILE}.out" >> ${JOB_COMMAND_FILE}
#          echo "# @ class = ${QUEUE}" >> ${JOB_COMMAND_FILE}
#          echo "# @ group = ${QUEUE}" >> ${JOB_COMMAND_FILE}
#          echo "# @ wall_clock_limit = 00:30:00" >> ${JOB_COMMAND_FILE}
#          echo "# @ resources = ConsumableCpus(1) ConsumableMemory(100)" >> ${JOB_COMMAND_FILE}
#          echo "# @ account_no = ${LL_ACCOUNT}" >> ${JOB_COMMAND_FILE}
#          echo "# @ queue" >> ${JOB_COMMAND_FILE}


        done   # DIRECTION_NUMBER loop

        # ---------------------------
        # Submit the job command file
        # ---------------------------
        echo "Submitting job control file ${JOB_COMMAND_FILE}..."
        #llsubmit ${JOB_COMMAND_FILE}

          # Submit the job on the fly
          # /bin/cat > ${JOB_COMMAND_FILE} <<EOF
          sbatch <<EOF
#!/bin/bash
# Job step for: ${SCRIPT_FILE}
#SBATCH --partition=serial
# SBATCH --export=ALL
#SBATCH --ntasks=1
#SBATCH --nodes=1  # should be equal to ntasks
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=4000  
#SBATCH --time=01:00:00
#SBATCH --output=${root_dir}/output/${JOB_TAG}.out
#SBATCH --error=${root_dir}/output/${JOB_TAG}.err
#SBATCH --job-name=${JOB_TAG}
${EXEC}
EOF

        # ------------------------------
        # Go back to the angle directory
        # ------------------------------

        cd ${ANGLE_DIRECTORY} 

      done   # MOLECULE_SET_NUMBER loop


      # --------------------------------
      # Go back to the profile directory
      # --------------------------------

      cd ${PROFILE_DIRECTORY} 

    done   # ANGLE_NUMBER loop


    # -----------------------------
    # Go back to the main directory
    # -----------------------------

    cd ${ROOT_DIRECTORY} 

  done   # PROFILE_NUMBER loop


  # ---------------------
  # Exit the shell script
  # ---------------------

  exit 0
