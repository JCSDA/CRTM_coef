#!/bin/sh

#-------------------------------------------------------------------------------
#                        -- USAGE DESCRIPTION FUNCTION --
#-------------------------------------------------------------------------------

usage()
{
  echo
  echo " Usage: process_TauProfile_files [-hn] [-d direction] [-q batch_queue]"
  echo "                                 [-t TAPE3_index_list]"
  echo
  echo "   -h           Print this message and exit"
  echo
  echo "   -n           Create the processing shell scripts but do not submit"
  echo "                the to the batch processor."
  echo
  echo "   -d           Use this option to specify the direction to process."
  echo "                Valid direction indicators are:"
  echo "                   up     == only process upwelling case."
  echo "                   down   == only process downwelling case."
  echo "                   updown == process both up and downwelling cases."
  echo "                Default value is updown."
  echo
  echo "   -q           Use this option to specify the batch queue to which the"
  echo "                generated script file will be submitted."
  echo "                Default action is determined from the defaults file."
  echo
  echo "   -t           Use this option to specify the LBLRTM TAPE3 index list"
  echo "                to process."
  echo "                Valid TAPE3 indices are:"
  echo "                   1-7 == individual molecule numbers (no continua)"
  echo "                   8   == all first seven molecules (no continua)"
  echo "                   9   == continua only"
  echo "                  10   == all first seven molecules (and their continua)"
  echo "                  11   == water vapor + ozone only (and their continua)"
  echo "                  12   == water vapor only (and it's continua)"
  echo "                  13   == dry gases. Everything but h2o and o3 (and their continua)"
  echo "                  14   == ozone only (and it's continua)"
  echo "                  15   == water vapor continua only"
  echo "                If more than one value specified, then the list *must* be"
  echo "                enclosed in quotes."
  echo "                Default value is determined from the defaults file."
  echo
}

SCRIPT_NAME="`basename $0`"
root_dir=$(pwd)
Assemble_FTS_TauProfile=/data/users/pstegmann/lib/CRTM/trunk/src/TauProd/Infrared/Assemble_FTS_TauProfile/Assemble_FTS_TauProfile
Compute_Effective_TauProfile=/data/users/pstegmann/projects/Moradi_stuff/crtm/src/TauProd/Infrared/Compute_Effective_TauProfile_FTS/Compute_Effective_TauProfile

#-------------------------------------------------------------------------------
#                        -- SET THE PROCESSING DEFAULTS --
#-------------------------------------------------------------------------------

  # --------------------------------
  # The default direction to process
  # See -d option
  # --------------------------------

  #DIRECTION_TYPE="updown"
  DIRECTION_TYPE="up"


  # -----------------------------------------
  # The default processing queue submit value
  # See -n option
  # -----------------------------------------

  QUEUE_SUBMIT="yes"


  # ------------------------------------------------
  # Default processing values from the defaults file
  # ------------------------------------------------

  # -- Defaults file and required quantities
  DEFAULTS_FILE="Transmittance_Production.processing_defaults"
  DEFAULTS_LIST="QUEUE TAPE3_LIST PROFILE_SET_NUMBER PROFILE_SET_ID"

  # -- Check existence of defaults file
  if [ ! -f ${DEFAULTS_FILE} ]; then
    echo "${DEFAULTS_FILE} file not found."
    exit 1
  fi

  # -- Get defaults from file
  for ITEM_NAME in ${DEFAULTS_LIST}; do

    ITEM_VALUE=`grep ":${ITEM_NAME}:" ${DEFAULTS_FILE} | cut -d":" -f3`

    case "${ITEM_NAME}" in

      # -- Default batch processing queue
      QUEUE) QUEUE=${ITEM_VALUE};;

      # -- The TAPE3 list
      TAPE3_LIST) MOLECULE_SET_LIST=${ITEM_VALUE};;

      # -- Default PROFILE SET and ID
      PROFILE_SET_NUMBER) PROFILE_SET_NUMBER=${ITEM_VALUE};;
      PROFILE_SET_ID) PROFILE_SET_ID=${ITEM_VALUE};;

      *) ;; # Ignore invalid default
    esac

  done



#-------------------------------------------------------------------------------
#                       -- PARSE THE COMMAND LINE OPTIONS --
#-------------------------------------------------------------------------------

  while getopts :hnd:q:t: OPTVAL; do


    # --------------------------------------------
    # If option argument looks like another option
    # exit the loop
    # --------------------------------------------

    case ${OPTARG} in
      -*) break;;
    esac


    # ----------------------------
    # Parse the valid options here
    # ----------------------------

    case ${OPTVAL} in
      d)  DIRECTION_TYPE=${OPTARG};;
      n)  QUEUE_SUBMIT="no";;
      q)  QUEUE=${OPTARG};;
      t)  MOLECULE_SET_LIST=${OPTARG};;
      h)  usage
          exit 0;;
      :|\?) OPTVAL=${OPTARG}
            break;;
    esac

  done


  # ----------------------------
  # Remove the options processed
  # ----------------------------

  shift `expr ${OPTIND} - 1`


  # ------------------------------------------
  # Now output invalidities based on OPTVAL
  # Need to do this as getopts does not handle
  # the situations where an option is passed
  # as an argument to another option.
  # ------------------------------------------

  case ${OPTVAL} in


    # --------------------------------------------
    # If OPTVAL contains nothing, then all options
    # have been successfully parsed and all that
    # remains are the positional parameters
    # --------------------------------------------

    \?) if [ $# -ne 0 ]; then
          ( echo " Invalid argument(s) $*" ; usage ) | more
          exit 2
        fi;;


    # ------------------------------------
    # Valid options, but missing arguments
    # ------------------------------------

    d|q|t) ( echo " '-${OPTVAL}' option requires an argument" ; usage ) | more
             exit 2;;


    # --------------
    # Invalid option
    # --------------

    ?) ( echo " Invalid option '-${OPTARG}'" ; usage ) | more
       exit 2;;

  esac


  # ---------------------------------------------------------
  # Assign the angle number. This is currently hardwired to 1
  # ---------------------------------------------------------

  ANGLE_NUMBER=1



#-------------------------------------------------------------------------------
#                  -- ASSIGN THE CURRENT PROCESSING VALUES --
#-------------------------------------------------------------------------------

  # --------------------------------
  # Email address for error messages
  # --------------------------------

  EMAIL_ADDRESS="stegmann@ucar.edu"


  # ---------------------
  # Directory definitions
  # ---------------------

  ROOT_DIRECTORY=${PWD}
  SRF_DIRECTORY=${ROOT_DIRECTORY}/SRF_Data


  # -------------------------------
  #  The atmospheric path direction
  #  1 == upwelling
  #  2 == downwelling
  # -------------------------------

  case ${DIRECTION_TYPE} in

    # -- upwelling only
    up) DIRECTION_LIST="2";;

    # -- downwelling only
    down) DIRECTION_LIST="3";;

    # -- Both
    updown) DIRECTION_LIST="1 2";;

    # -- Invalid
    *) ( echo " Invalid DIRECTION" ; usage ) | more
       exit 2;;

  esac


  # ---------------------------------------------
  # Count the number of molecule sets in the list
  # ---------------------------------------------

  N_MOLECULE_SETS=0

  for MOLECULE_NUMBER in ${MOLECULE_SET_LIST}; do
    N_MOLECULE_SETS=`expr ${N_MOLECULE_SETS} + 1`
  done


  # --------------------------------------------------------
  # Check that a "generic" Process Control file is available
  # --------------------------------------------------------

  PROCESS_CONTROL_FILE="pc.generic"
  #if [ ! -f ${PROCESS_CONTROL_FILE} ]; then
  #  echo " Generic Process Control file, ${PROCESS_CONTROL_FILE}, not found."
  #  exit 2
  #fi



#-------------------------------------------------------------------------------
#                  -- CREATE OUTPUT DIRECTORY IF REQUIRED --
#-------------------------------------------------------------------------------

  OUTPUT_DIR="TauProfile_data"
  if [ ! -d ${OUTPUT_DIR} ]; then
    mkdir ${OUTPUT_DIR}
  fi


  # -----------------------
  # Create job command file
  # -----------------------
  JOB_COMMAND_FILE="${SCRIPT_NAME}.jcf"
  #echo "#!/bin/sh" > ${JOB_COMMAND_FILE}

  
#-------------------------------------------------------------------------------
#                     -- BEGIN THE LOOP OVER DIRECTION --
#-------------------------------------------------------------------------------

  for DIRECTION_NUMBER in ${DIRECTION_LIST}; do

    case ${DIRECTION_NUMBER} in
      1) DIRECTION_NAME="upwelling";;
      2) DIRECTION_NAME="downwelling";;
    esac


    # ------------------------------------------
    # Create identifying name tags and filenames
    # ------------------------------------------

    FILE_TAG="process_TauProfile_files.${DIRECTION_NAME}"

    SCRIPT_FILE="${FILE_TAG}.sh"
    LOG_FILE="${FILE_TAG}.log"


    # ----------------------
    # Create the script file
    # ----------------------

    echo "#!/bin/sh" > ${SCRIPT_FILE}

    # -- Assemble the individual TauProfile files
    echo >> ${SCRIPT_FILE}; echo >> ${SCRIPT_FILE}
    echo "  # ---------------------------------------" >> ${SCRIPT_FILE}
    echo "  # Run the TauProfile assembly program for" >> ${SCRIPT_FILE}
    echo "  # ${DIRECTION_NAME} data"  >> ${SCRIPT_FILE}
    echo "  # ---------------------------------------" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    echo "  # -- Remove the signal file if it exists" >> ${SCRIPT_FILE}
    SIGNAL_FILE="Assemble_FTS_TauProfile.${DIRECTION_NAME}.signal"
    echo "  if [ -f ${SIGNAL_FILE} ]; then" >> ${SCRIPT_FILE}
    echo "    rm -f ${SIGNAL_FILE}" >> ${SCRIPT_FILE}
    echo "  fi" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    echo "  # -- Start the assembly program" >> ${SCRIPT_FILE}
    echo "  ${Assemble_FTS_TauProfile} << NoMoreInput > ${LOG_FILE}"  >> ${SCRIPT_FILE}
    echo "${PROFILE_SET_NUMBER}" >> ${SCRIPT_FILE}
    echo "${N_MOLECULE_SETS}" >> ${SCRIPT_FILE}
    echo "${MOLECULE_SET_LIST}" >> ${SCRIPT_FILE}
    echo "${DIRECTION_NUMBER}" >> ${SCRIPT_FILE}
    #echo "${PROCESS_CONTROL_FILE}" >> ${SCRIPT_FILE}
    echo "1, 3" >> ${SCRIPT_FILE}
    echo "NoMoreInput" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    echo "  # -- Check that run was successful" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}
    echo "  if [ ! -f ${SIGNAL_FILE} ]; then" >> ${SCRIPT_FILE}
    echo "    Mail -s '${SCRIPT_FILE}: Data assembly failed' ${EMAIL_ADDRESS} < /dev/null > /dev/null" >> ${SCRIPT_FILE}
    echo "    exit 2" >> ${SCRIPT_FILE}
    echo "  fi" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    # -- Compute the effective transmittances
    echo >> ${SCRIPT_FILE}; echo >> ${SCRIPT_FILE}
    echo "  # -------------------------------------------" >> ${SCRIPT_FILE}
    echo "  # Run the effective transmittance calculation" >> ${SCRIPT_FILE}
    echo "  # program for ${DIRECTION_NAME} data"  >> ${SCRIPT_FILE}
    echo "  # -------------------------------------------" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    echo "  # -- Remove the signal file if it exists" >> ${SCRIPT_FILE}
    SIGNAL_FILE="Compute_Effective_TauProfile.${DIRECTION_NAME}.signal"
    echo "  if [ -f ${SIGNAL_FILE} ]; then" >> ${SCRIPT_FILE}
    echo "    rm -f ${SIGNAL_FILE}" >> ${SCRIPT_FILE}
    echo "  fi" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    echo "  # -- Start the program" >> ${SCRIPT_FILE}
    echo "  ${Compute_Effective_TauProfile} << NoMoreInput >> ${LOG_FILE}"  >> ${SCRIPT_FILE}
    echo "${DIRECTION_NUMBER}" >> ${SCRIPT_FILE}
    echo "${PROCESS_CONTROL_FILE}" >> ${SCRIPT_FILE}
    echo "NoMoreInput" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    echo "  # -- Check that run was successful" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}
    echo "  if [ ! -f ${SIGNAL_FILE} ]; then" >> ${SCRIPT_FILE}
    echo "    Mail -s '${SCRIPT_FILE}: Effective tau computation failed' ${EMAIL_ADDRESS} < /dev/null > /dev/null" >> ${SCRIPT_FILE}
    echo "    exit 2" >> ${SCRIPT_FILE}
    echo "  fi" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}

    # -- Remove the script files
    echo >> ${SCRIPT_FILE}; echo >> ${SCRIPT_FILE}
    echo "  # ----------------------" >> ${SCRIPT_FILE}
    echo "  # Remove the script file" >> ${SCRIPT_FILE}
    echo "  # ----------------------" >> ${SCRIPT_FILE}
    echo >> ${SCRIPT_FILE}
    echo "  rm -f ${SCRIPT_FILE}" >> ${SCRIPT_FILE}


    # --------------------------------
    # Make the scriupt file executable
    # --------------------------------

    chmod 700 ${SCRIPT_FILE}

#    # ------------------------------------------------------------
#    # Add the current script as a job step in the job command file
#    # ------------------------------------------------------------
#    echo "#" >> ${JOB_COMMAND_FILE}
#    echo "# Job step for: ${SCRIPT_FILE}" >> ${JOB_COMMAND_FILE}
#    echo "# @ job_name = ${DIRECTION_NAME}" >> ${JOB_COMMAND_FILE}
#    echo "# @ executable = ${SCRIPT_FILE}" >> ${JOB_COMMAND_FILE}
#    echo "# @ step_name = ${SCRIPT_FILE}" >> ${JOB_COMMAND_FILE}
#    echo "# @ output = ${SCRIPT_FILE}.out" >> ${JOB_COMMAND_FILE}
#    echo "# @ error = ${SCRIPT_FILE}.out" >> ${JOB_COMMAND_FILE}
#    echo "# @ class = ${QUEUE}" >> ${JOB_COMMAND_FILE}
#    echo "# @ group = ${QUEUE}" >> ${JOB_COMMAND_FILE}
#    echo "# @ wall_clock_limit = 02:00:00" >> ${JOB_COMMAND_FILE}
#    echo "# @ resources = ConsumableCpus(1) ConsumableMemory(100)" >> ${JOB_COMMAND_FILE}
#    echo "# @ account_no = ${LL_ACCOUNT}" >> ${JOB_COMMAND_FILE}
#    echo "# @ queue" >> ${JOB_COMMAND_FILE}
 
     # Chnaged it to be able to submit the jobs to S4 queue and also
     # remove unnecessary files and submit the jobs on the fly    
     # Submit the job on the fly
#     /bin/cat > ${JOB_COMMAND_FILE} <<EOF
echo "EXECUTABLE $(pwd)/${SCRIPT_FILE}"
     sbatch <<EOF
#!/bin/bash
# Job step for: ${SCRIPT_FILE}
#SBATCH --partition=serial
#SBATCH --export=ALL
#SBATCH --ntasks=1
#SBATCH --nodes=1  # should be equal to ntasks
#SBATCH --cpus-per-task=1
#SBATCH --mem=48000M 
#SBATCH --time=06:00:00
#SBATCH --output=${root_dir}/output/${DIRECTION_NAME}.out
#SBATCH --error=${root_dir}/output/${DIRECTION_NAME}.err
#SBATCH --job-name=${DIRECTION_NAME}
srun $(pwd)/${SCRIPT_FILE} 
EOF

  done   # DIRECTION_NUMBER loop

  # ---------------------------
  # Submit the job command file
  # ---------------------------
  # echo "Submitting job control file ${JOB_COMMAND_FILE}..."
  #llsubmit ${JOB_COMMAND_FILE}
  
  
  # ---------------------
  # Exit the shell script
  # ---------------------

  exit 0
